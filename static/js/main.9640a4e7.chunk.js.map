{"version":3,"sources":["index.js"],"names":["App","chartContainerRef","useRef","chart","resizeObserver","useEffect","arr","vol","mov","_ref","Object","_tmp_deploys_x7fxrq_cl1qet4nz0mnt0us84pbxeh0l_source_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_tmp_deploys_x7fxrq_cl1qet4nz0mnt0us84pbxeh0l_source_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","data","time","console","log","co","avr","key","hasOwnProperty","aa","open","parseInt","high","low","close","cc","value","bb","push","current","createChart","width","clientWidth","height","clientHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","candleSeries","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","areaSeries","addLineSeries","lineStyle","lineWidth","crosshairMarkerVisible","crosshairMarkerRadius","crosshairMarkerBorderColor","crosshairMarkerBackgroundColor","lineType","autoscaleInfoProvider","priceRange","minValue","maxValue","margins","above","below","setMarkers","position","shape","id","text","size","subscribeCrosshairMove","param","subscribeClick","createPriceLine","price","axisLabelVisible","title","applyOptions","coordinate","priceToCoordinate","takeScreenshot","volumeSeries","addHistogramSeries","priceFormat","type","overlay","scaleMargins","top","bottom","ResizeObserver","entries","_entries$0$contentRec","contentRect","setTimeout","fitContent","observe","abrupt","disconnect","stop","apply","this","arguments","fetchData","react__WEBPACK_IMPORTED_MODULE_2___default","createElement","className","ref","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9640a4e7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\n//import { priceData } from \"./priceData\";\n//import { areaData } from './areaData';\n//import { volumeData } from \"./volumeData\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  const resizeObserver = useRef();\n\n  useEffect(() => {\n    const arr = [];\n    const vol = [];\n    const mov = [];\n    //var str={\"time\":'2022-1-1',\"open\":50,\"high\":45,\"low\":34,\"close\":34};\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=RELIANCE.BSE&outputsize=full&apikey=A3QPG0GAAYX8VGI2`;\n    const fetchData = async () => {\n      await fetch(API_Call)\n        .then(function (response) {\n          return response.json();\n        })\n        .then(function (data) {\n          let time = data[\"Time Series (Daily)\"];\n          console.log(data);\n          var co = 1;\n          var avr = 0;\n          for (var key in time) {\n            if (!time.hasOwnProperty(key)) continue;\n            var aa = {\n              time: key,\n              open: parseInt(time[key][\"1. open\"], 10),\n              high: parseInt(time[key][\"2. high\"], 10),\n              low: parseInt(time[key][\"3. low\"], 10),\n              close: parseInt(time[key][\"4. close\"], 10)\n            };\n            var closePrice = parseInt(time[key][\"4. close\"], 10);\n            avr = (avr * (co - 1) + closePrice) / co;\n            var cc = {\n              time: key,\n              value: avr\n            };\n            var bb = {\n              time: key,\n              value: parseInt(time[key][\"5. volume\"], 10)\n            };\n            co++;\n            vol.push(bb);\n            arr.push(aa);\n            mov.push(cc);\n          }\n\n          console.log(\"2\");\n          chart.current = createChart(chartContainerRef.current, {\n            width: chartContainerRef.current.clientWidth,\n            height: chartContainerRef.current.clientHeight,\n            layout: {\n              backgroundColor: \"#253248\",\n              textColor: \"rgba(255, 255, 255, 0.9)\"\n            },\n            grid: {\n              vertLines: {\n                color: \"#334158\"\n              },\n              horzLines: {\n                color: \"#334158\"\n              }\n            },\n            crosshair: {\n              mode: CrosshairMode.Normal\n            },\n            priceScale: {\n              borderColor: \"#485c7b\"\n            },\n            timeScale: {\n              borderColor: \"#485c7b\"\n            }\n          });\n\n          console.log(chart.current);\n\n          const candleSeries = chart.current.addCandlestickSeries({\n            upColor: \"#4bffb5\",\n            downColor: \"#ff4976\",\n            borderDownColor: \"#ff4976\",\n            borderUpColor: \"#4bffb5\",\n            wickDownColor: \"#838ca1\",\n            wickUpColor: \"#838ca1\"\n          });\n          console.log(\"3\");\n          candleSeries.setData(arr);\n\n          const areaSeries = chart.current.addLineSeries({\n            color: \"#f48fb1\",\n            lineStyle: 0,\n            lineWidth: 1,\n            crosshairMarkerVisible: true,\n            crosshairMarkerRadius: 6,\n            crosshairMarkerBorderColor: \"#ffffff\",\n            crosshairMarkerBackgroundColor: \"#2296f3\",\n            lineType: 1,\n            autoscaleInfoProvider: () => ({\n              priceRange: {\n                minValue: 800,\n                maxValue: 2700\n              },\n              margins: {\n                above: 100,\n                below: 100\n              }\n            })\n          });\n\n          areaSeries.setData(mov);\n\n          areaSeries.setMarkers([\n            {\n              time: \"2019-04-09\",\n              position: \"aboveBar\",\n              color: \"black\",\n              shape: \"arrowDown\"\n            },\n            {\n              time: \"2019-05-31\",\n              position: \"belowBar\",\n              color: \"red\",\n              shape: \"arrowUp\",\n              id: \"id3\"\n            },\n            {\n              time: \"2019-05-31\",\n              position: \"belowBar\",\n              color: \"orange\",\n              shape: \"arrowUp\",\n              id: \"id4\",\n              text: \"example\",\n              size: 2\n            }\n          ]);\n\n          chart.current.subscribeCrosshairMove((param) => {\n            // console.log(param.hoveredMarkerId);\n          });\n\n          chart.current.subscribeClick((param) => {\n            //console.log(param.hoveredMarkerId);\n          });\n\n          const priceLine = areaSeries.createPriceLine({\n            price: 2500.0,\n            color: \"green\",\n            lineWidth: 2,\n\n            axisLabelVisible: true,\n            title: \"P/L 500\"\n          });\n\n          priceLine.applyOptions({\n            price: 2000.0,\n            color: \"red\",\n            lineWidth: 3,\n            axisLabelVisible: false,\n            title: \"P/L 600\"\n          });\n          const coordinate = areaSeries.priceToCoordinate(2500.5);\n          console.log(coordinate);\n          const screenshot = chart.current.takeScreenshot();\n\n          const volumeSeries = chart.current.addHistogramSeries({\n            color: \"#182233\",\n            lineWidth: 4,\n            priceFormat: {\n              type: \"volume\"\n            },\n            overlay: true,\n            scaleMargins: {\n              top: 0.8,\n              bottom: 0\n            }\n          });\n          console.log(\"4\");\n          volumeSeries.setData(vol);\n        });\n\n      console.log(\"1\");\n      resizeObserver.current = new ResizeObserver((entries) => {\n        const { width, height } = entries[0].contentRect;\n        chart.current.applyOptions({ width, height });\n        setTimeout(() => {\n          chart.current.timeScale().fitContent();\n        }, 0);\n      });\n\n      resizeObserver.current.observe(chartContainerRef.current);\n\n      return () => resizeObserver.current.disconnect();\n    };\n    fetchData();\n  });\n\n  // Resize chart on container resizes.\n  useEffect(() => {}, []);\n\n  return (\n    <div className=\"App\">\n      <div ref={chartContainerRef} className=\"chart-container\" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}